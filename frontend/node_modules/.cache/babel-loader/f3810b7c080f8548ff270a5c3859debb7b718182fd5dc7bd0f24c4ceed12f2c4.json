{"ast":null,"code":"var _jsxFileName = \"/home/jvcbyte/Downloads/ecommerce/frontend/src/components/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  const sendMessage = async e => {\n    e.preventDefault();\n    if (!input.trim()) return;\n    const userMessage = {\n      text: input,\n      sender: 'user',\n      timestamp: new Date().toLocaleTimeString()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInput('');\n    try {\n      const response = await fetch('http://localhost:5001/api/chatbot', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: input\n        })\n      });\n      const data = await response.json();\n      let botMessage = {\n        text: '',\n        sender: 'bot',\n        timestamp: new Date().toLocaleTimeString()\n      };\n      switch (data.type) {\n        case 'products':\n          botMessage.text = `I found some products for you:\\n\\n${data.results.map(p => `- ${p.name} - $${p.price.toFixed(2)}`).join('\\n')}`;\n          break;\n        case 'comparison':\n          botMessage.text = `Comparing products:\\n\\n${data.products.map(p => `${p.name}:\\n- Price: $${p.price.toFixed(2)}\\n- ${p.description}`).join('\\n\\n')}`;\n          break;\n        case 'faq':\n          botMessage.text = data.answer;\n          break;\n        case 'availability':\n          botMessage.text = data.available ? 'The product is currently in stock!' : 'I apologize, but this product is currently out of stock.';\n          break;\n        case 'recommendations':\n          botMessage.text = `Here are some products you might like:\\n\\n${data.products.map(p => `- ${p.name} - $${p.price.toFixed(2)}`).join('\\n')}`;\n          break;\n        default:\n          botMessage.text = data.message;\n      }\n      setMessages(prev => [...prev, botMessage]);\n    } catch (error) {\n      console.error('Error:', error);\n      setMessages(prev => [...prev, {\n        text: 'Sorry, I encountered an error. Please try again later.',\n        sender: 'bot',\n        timestamp: new Date().toLocaleTimeString()\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Customer Support Chatbot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: message.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"timestamp\",\n            children: message.timestamp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      className: \"chatbot-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"ub7mF0g0316z3YNHsiLBOML0ce4=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","input","setInput","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","sendMessage","e","preventDefault","trim","userMessage","text","sender","timestamp","Date","toLocaleTimeString","prev","response","fetch","method","headers","body","JSON","stringify","message","data","json","botMessage","type","results","map","p","name","price","toFixed","join","products","description","answer","available","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","ref","onSubmit","value","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["/home/jvcbyte/Downloads/ecommerce/frontend/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport './Chatbot.css';\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const messagesEndRef = useRef(null);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n    if (!input.trim()) return;\n\n    const userMessage = {\n      text: input,\n      sender: 'user',\n      timestamp: new Date().toLocaleTimeString()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInput('');\n\n    try {\n      const response = await fetch('http://localhost:5001/api/chatbot', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ message: input })\n      });\n\n      const data = await response.json();\n      \n      let botMessage = {\n        text: '',\n        sender: 'bot',\n        timestamp: new Date().toLocaleTimeString()\n      };\n\n      switch (data.type) {\n        case 'products':\n          botMessage.text = `I found some products for you:\\n\\n${\n            data.results.map(p => `- ${p.name} - $${p.price.toFixed(2)}`).join('\\n')\n          }`;\n          break;\n        case 'comparison':\n          botMessage.text = `Comparing products:\\n\\n${\n            data.products.map(p => `${p.name}:\\n- Price: $${p.price.toFixed(2)}\\n- ${p.description}`).join('\\n\\n')\n          }`;\n          break;\n        case 'faq':\n          botMessage.text = data.answer;\n          break;\n        case 'availability':\n          botMessage.text = data.available \n            ? 'The product is currently in stock!'\n            : 'I apologize, but this product is currently out of stock.';\n          break;\n        case 'recommendations':\n          botMessage.text = `Here are some products you might like:\\n\\n${\n            data.products.map(p => `- ${p.name} - $${p.price.toFixed(2)}`).join('\\n')\n          }`;\n          break;\n        default:\n          botMessage.text = data.message;\n      }\n\n      setMessages(prev => [...prev, botMessage]);\n    } catch (error) {\n      console.error('Error:', error);\n      setMessages(prev => [...prev, {\n        text: 'Sorry, I encountered an error. Please try again later.',\n        sender: 'bot',\n        timestamp: new Date().toLocaleTimeString()\n      }]);\n    }\n  };\n\n  return (\n    <div className=\"chatbot-container\">\n      <div className=\"chatbot-header\">\n        <h3>Customer Support Chatbot</h3>\n      </div>\n      <div className=\"chatbot-messages\">\n        {messages.map((message, index) => (\n          <div \n            key={index}\n            className={`message ${message.sender}`}\n          >\n            <div className=\"message-content\">\n              <p>{message.text}</p>\n              <span className=\"timestamp\">{message.timestamp}</span>\n            </div>\n          </div>\n        ))}\n        <div ref={messagesEndRef} />\n      </div>\n      <form onSubmit={sendMessage} className=\"chatbot-input\">\n        <input\n          type=\"text\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder=\"Type your message...\"\n        />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}